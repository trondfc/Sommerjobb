/*
* Code for reciving IR commands using the IRremote library
* Used IR protocol: NEC
*/

#define PRINT_DEBUG  // Uncomment to disable printing of debug messages

// Setup debug printing macros
#ifdef PRINT_DEBUG
#define DEBUG(msg) (Serial.println(msg))
#else
#define DEBUG(msg)
#endif

#include <IRremote.hpp> // include IRremote library

#define DECODE_NEC          // Set protocol to NEC
#define IR_RECEIVE_PIN 2    // Pin for IR receiver

void setup() {
    Serial.begin(9600);
    delay(3000);  // wait for serial window conection, used for debuging

    DEBUG(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));

    // Start the receiver and if not 3. parameter specified, take LED_BUILTIN pin from the internal boards definition as default feedback LED
    IrReceiver.begin(IR_RECEIVE_PIN);

    Serial.print(F("Ready to receive IR signals of protocols: "));
    printActiveIRProtocols(&Serial);
    Serial.print(F("at pin "));
    Serial.println(IR_RECEIVE_PIN);
}

void loop() {
    /*
    * Check if received data is available and if yes, try to decode it.
    * Decoded result is in the IrReceiver.decodedIRData structure.
    */
    if (IrReceiver.decode()) {

        IrReceiver.printIRResultShort(&Serial); // Print a short summary of received data

        if (IrReceiver.decodedIRData.protocol == UNKNOWN) {
        Serial.println(F("Received noise or an unknown (or not yet enabled) protocol"));
        // We have an unknown protocol here, print more info
        IrReceiver.printIRResultRawFormatted(&Serial, true);
        }
        Serial.println();
        /*
        * !!!Important!!! Enable receiving of the next value,
        * since receiving has stopped after the end of the current received data packet.
        */
        IrReceiver.resume();  // Enable receiving of the next value

        Serial.print("The ID is:");                     // Print recived ID
        Serial.println(IrReceiver.decodedIRData.address);

        Serial.print("Recived command is:");                // Print recived command
        Serial.println(IrReceiver.decodedIRData.command);
    }
}